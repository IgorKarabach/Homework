{
	"info": {
		"_postman_id": "938fb62f-29e5-4c97-baf5-dfe1b180aef0",
		"name": "Homework_2_Postman_Igor_Karabach",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1-first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/first\r",
							"// 1. Отправить запрос.\r",
							"// This is the first responce from server!\r",
							"\r",
							"// 2. Статус код 200 \r",
							"// Tests --> SNIPPETS --> Status code: Code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Test Result: PASS Status code is 200\r",
							"\r",
							"//Проверить, что в body приходит правильный string.\r",
							"//1 variant: SNIPPETS --> Response body: Contain string\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});\r",
							"// Test Result: PASS Body matches string\r",
							"\r",
							"//2 variant: SNIPPETS --> Response body: Is equal to string\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});\r",
							"// Test Result: PASS Body is correct"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "2-user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_3\r",
							"// 1. Отправить запрос.\r",
							"// {\r",
							"//     \"age\": \"33\",\r",
							"//     \"family\": {\r",
							"//         \"children\": [\r",
							"//             [\r",
							"//                 \"Alex\",\r",
							"//                 24\r",
							"//             ],\r",
							"//             [\r",
							"//                 \"Kate\",\r",
							"//                 12\r",
							"//             ]\r",
							"//         ],\r",
							"//         \"u_salary_1_5_year\": 4000\r",
							"//     },\r",
							"//     \"name\": \"Igor\",\r",
							"//     \"salary\": 1000\r",
							"// }\r",
							"\r",
							"// 2. Статус код 200 \r",
							"// Tests --> SNIPPETS --> Status code: Code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Test Result: PASS Status code is 200\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"// Переменная yolocka_2 будет применяться в последующих тестах. В тестах ниже её не будет.\r",
							"var yolochka_2 = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"// Tests --> SNIPPETS --> Response body: JSON value check\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(yolochka_2.name).to.eql('Igor');\r",
							"});\r",
							"// Test Result: PASS Check name\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"// Tests --> SNIPPETS --> Response body: JSON value check\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(yolochka_2.age).to.eql('33');\r",
							"});\r",
							"// Test Result: PASS Check age\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"// Tests --> SNIPPETS --> Response body: JSON value check\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(yolochka_2.salary).to.eql(1000);\r",
							"});\r",
							"// Test Result: PASS Check salary\r",
							"\r",
							"// 7. Спарсить request.\r",
							"// Переменная reqBody будет применяться в последующих тестах. В тестах ниже её не будет.\r",
							"var reqBody = request.data;\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name from request\", function () {\r",
							"    pm.expect(reqBody.name).to.eql(yolochka_2.name);\r",
							"});\r",
							"// Test Result: PASS Check name from request\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age from request\", function () {\r",
							"    pm.expect(reqBody.age).to.eql(yolochka_2.age);\r",
							"});\r",
							"// Test Result: PASS Check age from request\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary from request\", function () {\r",
							"    pm.expect(+reqBody.salary).to.eql(yolochka_2.salary);\r",
							"});\r",
							"// Test Result: PASS Check salary from request\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"let resp_family = yolochka_2.family\r",
							"console.log(\"resp_family\", resp_family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"u_salary_1_5_year = salary*4\" , function () {\r",
							"    pm.expect(yolochka_2.family.u_salary_1_5_year).to.eql(yolochka_2.salary*4)\r",
							"})\r",
							"// Test Result: PASS u_salary_1_5_year = salary*4"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Igor",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "3-object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// {\r",
							"//     \"age\": \"33\",\r",
							"//     \"family\": {\r",
							"//         \"children\": [\r",
							"//             [\r",
							"//                 \"Alex\",\r",
							"//                 24\r",
							"//             ],\r",
							"//             [\r",
							"//                 \"Kate\",\r",
							"//                 12\r",
							"//             ]\r",
							"//         ],\r",
							"//         \"pets\": {\r",
							"//             \"cat\": {\r",
							"//                 \"age\": 3,\r",
							"//                 \"name\": \"Sunny\"\r",
							"//             },\r",
							"//             \"dog\": {\r",
							"//                 \"age\": 4,\r",
							"//                 \"name\": \"Luky\"\r",
							"//             }\r",
							"//         },\r",
							"//         \"u_salary_1_5_year\": 4000\r",
							"//     },\r",
							"//     \"name\": \"Igor\",\r",
							"//     \"salary\": 1000\r",
							"// } \r",
							"\r",
							"// 2. Статус код 200\r",
							"// Tests --> SNIPPETS --> Status code: Code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Test Result: PASS Status code is 200\r",
							"\r",
							"// 3. Спарсить response body в json. \r",
							"// Переменная yolocka_2 будет применяться в последующих тестах. В тестах ниже её не будет.\r",
							"var yolochka_3 = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"// Переменная reqUrl_3 будет применяться в последующих тестах. В тестах ниже её не будет.\r",
							"let reqUrl_3 = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name from request\", function () {\r",
							"    pm.expect(reqUrl_3.name).to.eql(yolochka_3.name);\r",
							"});\r",
							"// Test Result: PASS Check name from request\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age from request\", function () {\r",
							"    pm.expect(reqUrl_3.age).to.eql(yolochka_3.age)\r",
							"});\r",
							"// Test Result: PASS Check age from request\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary from request\", function () {\r",
							"    pm.expect(+reqUrl_3.salary).to.eql(yolochka_3.salary)\r",
							"});\r",
							"// Test Result: PASS Check salary from request\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(yolochka_3.family)\r",
							"// Console:\r",
							"// GET http://162.55.220.72:5005/object_info_3?name=Igor&age=33&salary=1000\r",
							"// {children: [2], pets: {…}, u_salary_1_5_year: 4000}\r",
							"// children: [2]\r",
							"// 0: [2]\r",
							"// 0: \"Alex\"\r",
							"// 1: 24\r",
							"// 1: [2]\r",
							"// 0: \"Kate\"\r",
							"// 1: 12\r",
							"// pets: {…}\r",
							"// cat: {…}\r",
							"// age: 3\r",
							"// name: \"Sunny\"\r",
							"// dog: {…}\r",
							"// age: 4\r",
							"// name: \"Luky\"\r",
							"// u_salary_1_5_year: 4000\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"The dog contains the name\", function () {\r",
							"    pm.expect(yolochka_3.family.pets.dog).to.have.property(\"name\")\r",
							"});\r",
							"// Test Result: PASS The dog contains the name\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age. ===\r",
							"pm.test(\"The dog contains the age\", function () {\r",
							"    pm.expect(yolochka_3.family.pets.dog).to.have.any.keys(\"age\")\r",
							"});\r",
							"// Test Result: PASS The dog contains the name\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"The name contains value Luky\", function () {\r",
							"    pm.expect(yolochka_3.family.pets.dog.name).to.eql(\"Luky\")\r",
							"});\r",
							"// Test Result: PASS The name contains value Luky\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"The age contains value 4\", function () {\r",
							"    pm.expect(yolochka_3.family.pets.dog.age).to.eql(4)\r",
							"});\r",
							"// Test Result: PASS The age contains value 4"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Igor&age=33&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Igor"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4-object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// {\r",
							"//     \"age\": 33,\r",
							"//     \"name\": \"Igor\",\r",
							"//     \"salary\": [\r",
							"//         1000,\r",
							"//         \"2000\",\r",
							"//         \"3000\"\r",
							"//     ]\r",
							"// }\r",
							"\r",
							"// 2. Статус код 200\r",
							"// Tests --> SNIPPETS --> Status code: Code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Test Result: PASS Status code is 200\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"// Переменная yolocka_4 будет применяться в последующих тестах. В тестах ниже её не будет.\r",
							"var yolochka_4 = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"// Переменная reqUrl_4 будет применяться в последующих тестах. В тестах ниже её не будет.\r",
							"let reqUrl_4 = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name from request\", function () {\r",
							"    pm.expect(reqUrl_4.name).to. eql(yolochka_4.name)\r",
							"});\r",
							"// Test Result: PASS Check name from request\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Check age from request\", function () {\r",
							"    pm.expect(+reqUrl_4.age).to.eql(yolochka_4.age)\r",
							"});\r",
							"// Test Result: PASS Check age from request\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(\"Check salary from request = \" + (+reqUrl_4.salary))\r",
							"// Console: \r",
							"// Check salary from request = 1000\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"Check salary from response = \" + yolochka_4.salary)\r",
							"// Console:\r",
							"// Check salary from response = 1000,2000,3000\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"Check salary [0] from response = \"+ yolochka_4.salary[0])\r",
							"// Console:\r",
							"// Check salary [0] from response = 1000\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Check salary [1] from response = \" + yolochka_4.salary[1])\r",
							"// Console:\r",
							"// Check salary [1] from response = 2000\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Check salary [2] from response = \" + yolochka_4.salary[2])\r",
							"// Console:\r",
							"// Check salary [2] from response = 3000\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check salary [0] from response = salary from reqest\", function () {\r",
							"    pm.expect(yolochka_4.salary[0]).to.eql(+reqUrl_4.salary)\r",
							"});\r",
							"// Test Result: PASS Check salary [0] from response = salary from reqest\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary [1] from response = salary*2 from reqest\", function () {\r",
							"    pm.expect(+yolochka_4.salary[1]).to.eql(+reqUrl_4.salary*2)\r",
							"});\r",
							"// Test Result: PASS Check salary [1] from response = salary*2 from reqest\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary [2] from response = salary*3 from reqest\", function () {\r",
							"    pm.expect(+yolochka_4.salary[2]).to.eql(+reqUrl_4.salary*3)\r",
							"});\r",
							"// Test Result: PASS Check salary [2] from response = salary*3 from reqest\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"// Environment --> VARIABLE: name --> Save\r",
							"\r",
							"//  16. Создать в окружении переменную age\r",
							"// Environment --> VARIABLE: age --> Save\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"// Environment --> VARIABLE: salary --> yolochka_4.salary\r",
							"\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"// 4-object_info_4 --> dropdown --> group_26\r",
							"pm.environment.set(\"name\", reqUrl_4.name);\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", reqUrl_4.age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", reqUrl_4.salary)\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (var i = 0; i < yolochka_4.salary.length; i++) {\r",
							"   console.log(\"Cycle with salary for element №\", i, yolochka_4.salary[i]);\r",
							"}\r",
							"// Console:\r",
							"// Cycle with salary for element №\r",
							"// 0\r",
							"// 1000\r",
							" \r",
							"// Cycle with salary for element №\r",
							"// 1\r",
							"// 2000\r",
							" \r",
							"// Cycle with salary for element №\r",
							"// 2\r",
							"// 3000"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Igor&age=33&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Igor"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5-user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// Body --> VALUE: {{salary}}\r",
							"\r",
							"// 2. Вставить параметр age из окружения в age ===\r",
							"// Body --> VALUE: {{age}}\r",
							"\r",
							"// 3. Вставить параметр name из окружения в name ===\r",
							"// Body --> VALUE: {{name}}\r",
							"\r",
							"// 4. Отправить запрос.\r",
							"// {\r",
							"//     \"person\": {\r",
							"//         \"u_age\": 33,\r",
							"//         \"u_name\": [\r",
							"//             \"Igor\",\r",
							"//             1000,\r",
							"//             33\r",
							"//         ],\r",
							"//         \"u_salary_5_years\": 4200.0\r",
							"//     },\r",
							"//     \"qa_salary_after_1.5_year\": 3300.0,\r",
							"//     \"qa_salary_after_12_months\": 2700.0,\r",
							"//     \"qa_salary_after_3.5_years\": 3800.0,\r",
							"//     \"qa_salary_after_6_months\": 2000,\r",
							"//     \"start_qa_salary\": 1000\r",
							"// }\r",
							"\r",
							"// 5. Статус код 200\r",
							"// Tests --> SNIPPETS --> Status code: Code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Test Result: Status code is 200\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"// Переменная yolocka_5 будет применяться в последующих тестах. В тестах ниже её не будет.\r",
							"var yolochka_5 = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"var reqBody = request.data;\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check for parameter start_qa_salary\", function () {\r",
							"    pm.expect(yolochka_5).to.property(\"start_qa_salary\")\r",
							"});\r",
							"// Test Result: PASS Check for parameters start_qa_salary\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check for parameter qa_salary_after_6_months\", function () {\r",
							"    pm.expect(yolochka_5).to.have.property(\"qa_salary_after_6_months\")\r",
							"});\r",
							"// Test Result: PASS Check for parameter qa_salary_after_6_months\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check for parameter qa_salary_after_12_months\", function () {\r",
							"    pm.expect(yolochka_5).to.have.any.keys(\"qa_salary_after_12_months\")\r",
							"});\r",
							"// Test Result: PASS Check for parameter qa_salary_after_12_months\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check for parameter qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(yolochka_5).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"});\r",
							"// Test Result: PASS Check for parameter qa_salary_after_1.5_year\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check for parameter qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(yolochka_5).to.have.any.keys(\"qa_salary_after_3.5_years\")\r",
							"});\r",
							"// Test Result: PASS Check for parameter qa_salary_after_3.5_years\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check for parameter person\", function () {\r",
							"    pm.expect(yolochka_5).to.have.property(\"person\")\r",
							"});\r",
							"// Test Result: PASS Check for parameter person\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check start_qa_salary = salary from reqest\", function () {\r",
							"    pm.expect(yolochka_5.start_qa_salary).to.eql(+reqBody.salary)\r",
							"});\r",
							"// Test Result: PASS Check start_qa_salary = salary from reqest\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_6_months = salary*2\", function () {\r",
							"    pm.expect(yolochka_5.qa_salary_after_6_months).to.eql(reqBody.salary*2)\r",
							"});\r",
							"// Test Result: PASS Check qa_salary_after_6_months = salary*2\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_12_months = salary*2.7\", function () {\r",
							"    pm.expect(yolochka_5.qa_salary_after_12_months).to.eql(reqBody.salary*2.7)\r",
							"});\r",
							"// Test Result: PASS Check qa_salary_after_6_months = salary*2.7\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_1.5_year = salary*3.3\", function () {\r",
							"    pm.expect(yolochka_5[\"qa_salary_after_1.5_year\"]).to.eql(reqBody.salary*3.3)\r",
							"});\r",
							"// Test Result: PASS Check qa_salary_after_1.5_year = salary*3.3\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_3.5_years = salary*3.8\", function () {\r",
							"    pm.expect(yolochka_5[\"qa_salary_after_3.5_years\"]).to.eql(reqBody.salary*3.8)\r",
							"});\r",
							"// Test Result: PASS Check qa_salary_after_3.5_years = salary*3.8\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check person.u_name[1] = salary\", function () {\r",
							"    pm.expect(yolochka_5[\"person\"][\"u_name\"][1]).to.eql(+reqBody.salary)\r",
							"});\r",
							"// Test Result: PASS Check person.u_name[1] = salary\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Check u_age = age\", function () {\r",
							"    pm.expect(yolochka_5.person.u_age).to.eql(+reqBody.age)\r",
							"});\r",
							"// Test Result: PASS Check u_age = age\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Check u_salary_5_years = salary*4.2\", function () {\r",
							"    pm.expect(yolochka_5[\"person\"][\"u_salary_5_years\"]).to.eql(reqBody.salary*4.2)\r",
							"\r",
							"});\r",
							"// Test Result: PASS Check u_salary_5_years = salary*4.2\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (let key in yolochka_5.person)\r",
							"    console.log(key, yolochka_5.person[key]);\r",
							"// Console:\r",
							"// u_age\r",
							"// 33\r",
							" \r",
							"// u_name\r",
							"// (3) [\"Igor\", 1000, 33]\r",
							"// 0: \"Igor\"\r",
							"// 1: 1000\r",
							"// 2: 33\r",
							" \r",
							"// u_salary_5_years\r",
							"// 4200"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}