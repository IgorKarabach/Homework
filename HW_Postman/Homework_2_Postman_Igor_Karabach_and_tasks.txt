HW_2 Postman


http://162.55.220.72:5005/first
1. Отправить запрос. === Send -->
This is the first responce from server!

2. Статус код 200 === Tests --> SNIPPETS --> Status code: Code is 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
Test Result: PASS Status code is 200 

3. Проверить, что в body приходит правильный string. === Test --> SNIPPETS
1 variant: SNIPPETS --> Response body: Contain string
pm.test("Body matches string", function () {
    pm.expect(pm.response.text()).to.include("This is the first responce from server!");
});
Test Result: PASS Body matches string

2 variant: SNIPPETS --> Response body: Is equal to string
pm.test("Body is correct", function () {
    pm.response.to.have.body("This is the first responce from server!");
});
Test Result: PASS Body is correct

http://162.55.220.72:5005/user_info_3
1. Отправить запрос. === Send -->
{
    "age": "33",
    "family": {
        "children": [
            [
                "Alex",
                24
            ],
            [
                "Kate",
                12
            ]
        ],
        "u_salary_1_5_year": 4000
    },
    "name": "Igor",
    "salary": 1000
}
2. Статус код 200 === Tests --> SNIPPETS --> Status code: Code is 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
Test Result: PASS Status code is 200

3. Спарсить response body в json.
// Переменная yolochka_2 будет применяться в последующих тестах. В тестах ниже её не будет.
var yolochka_2 = pm.response.json();

4. Проверить, что name в ответе равно name s request (name вбить руками.) === Tests --> SNIPPETS --> Response body: JSON value
pm.test("Check name", function () {
    pm.expect(yolochka_2.name).to.eql('Igor');
});
Test Result: PASS Check name

5. Проверить, что age в ответе равно age s request (age вбить руками.)  === Tests --> SNIPPETS --> Response body: JSON value
var yolochka_2 = pm.response.json();
pm.test("Check age", function () {
    pm.expect(yolochka_2.age).to.eql('33');
});
Test Result: PASS Check age

6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)
Tests --> SNIPPETS --> Response body: JSON value check
pm.test("Check salary", function () {
    pm.expect(yolochka_2.salary).to.eql(1000);
});
Test Result: PASS Check salary
 
7. Спарсить request. === 
// Переменная reqBody будет применяться в последующих тестах. В тестах ниже её не будет.
var reqBody = request.data;

8. Проверить, что name в ответе равно name s request (name забрать из request.) === 
pm.test("Check name from request", function () {
    pm.expect(reqBody.name).to.eql(yolochka_2.name);
});
Test Result: PASS Check name from request

9. Проверить, что age в ответе равно age s request (age забрать из request.)  === 
pm.test("Check age from request", function () {
    pm.expect(reqBody.age).to.eql(yolochka_2.age);
});
Test Result: PASS Check age from request

10. Проверить, что salary в ответе равно salary s request (salary забрать из request.) ===
pm.test("Check salary from request", function () {
    pm.expect(+(reqBody.salary)).to.eql(yolochka_2.salary);
});
Test Result: PASS Check salary from request

11. Вывести в консоль параметр family из response. === 
let resp_family = yolochka_2.family
console.log("resp_family", resp_family)
Console:
POST http://162.55.220.72:5005/user_info_3
resp_family
{children: [2], u_salary_1_5_year: 4000}
children: [2]
0: [2]
0: "Alex"
1: 24
1: [2]
0: "Kate"
1: 12
u_salary_1_5_year: 4000

12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request) ===
pm.test("u_salary_1_5_year = salary*4" , function () {
    pm.expect(yolochka_2.family.u_salary_1_5_year).to.eql(yolochka_2.salary*4)
})
Test Result: PASS u_salary_1_5_year = salary*4

http://162.55.220.72:5005/object_info_3
1. Отправить запрос. === Send -->
{
    "age": "33",
    "family": {
        "children": [
            [
                "Alex",
                24
            ],
            [
                "Kate",
                12
            ]
        ],
        "pets": {
            "cat": {
                "age": 3,
                "name": "Sunny"
            },
            "dog": {
                "age": 4,
                "name": "Luky"
            }
        },
        "u_salary_1_5_year": 4000
    },
    "name": "Igor",
    "salary": 1000
}

2. Статус код 200 === Tests --> SNIPPETS --> Status code: Code is 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
Test Result: Status code is 200

3. Спарсить response body в json. === 
// Переменная yolocka_3 будет применяться в последующих тестах. В тестах ниже её не будет.
var yolochka_3 = pm.response.json();

4. Спарсить request. ===
// Переменная reqUrl_3 будет применяться в последующих тестах. В тестах ниже её не будет.
let reqUrl_3 = pm.request.url.query.toObject();

5. Проверить, что name в ответе равно name s request (name забрать из request.) ===
pm.test("Check name from request", function () {
    pm.expect(reqUrl_3.name).to.eql(yolochka_3.name);
});
Test Result: PASS Check name from request

6. Проверить, что age в ответе равно age s request (age забрать из request.) ===
pm.test("Check age from request", function () {
    pm.expect(reqUrl_3.age).to.eql(yolochka_3.age)
});
Test Result: PASS Check age from request

7. Проверить, что salary в ответе равно salary s request (salary забрать из request.) ===
pm.test("Check salary from request", function () {
    pm.expect(+reqUrl_3.salary).to.eql(yolochka_3.salary)
});
Test Result: PASS Check salary from request

8. Вывести в консоль параметр family из response. ===
console.log(yolochka_3.family)
Console:
GET http://162.55.220.72:5005/object_info_3?name=Igor&age=33&salary=1000
{children: [2], pets: {…}, u_salary_1_5_year: 4000}
children: [2]
0: [2]
0: "Alex"
1: 24
1: [2]
0: "Kate"
1: 12
pets: {…}
cat: {…}
age: 3
name: "Sunny"
dog: {…}
age: 4
name: "Luky"
u_salary_1_5_year: 4000

9. Проверить, что у параметра dog есть параметры name. ===
pm.test("The dog contains the name", function () {
    pm.expect(yolochka_3.family.pets.dog).to.have.property("name")
});
Test Result: PASS The dog contains the name


10. Проверить, что у параметра dog есть параметры age. ===
pm.test("The dog contains the age", function () {
    pm.expect(yolochka_3.family.pets.dog).to.have.any.keys("age")
});
Test Result: PASS The dog contains the name


11. Проверить, что параметр name имеет значение Luky. ===
pm.test("The name contains value Luky", function () {
    pm.expect(yolochka_3.family.pets.dog.name).to.eql("Luky")
});
Test Result: PASS The name contains value Luky

12. Проверить, что параметр age имеет значение 4. ===
pm.test("The age contains value 4", function () {
    pm.expect(yolochka_3.family.pets.dog.age).to.eql(4)
});
Test Result: PASS The age contains value 4

http://162.55.220.72:5005/object_info_4
1. Отправить запрос. === 
{
    "age": 33,
    "name": "Igor",
    "salary": [
        1000,
        "2000",
        "3000"
    ]
}

2. Статус код 200 === Tests --> SNIPPETS --> Status code: Code is 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
Test Result: Status code is 200

3. Спарсить response body в json. ===
// Переменная yolocka_4 будет применяться в последующих тестах. В тестах ниже её не будет.
var yolochka_4 = pm.response.json();

4. Спарсить request. ===
// Переменная reqUrl_4 будет применяться в последующих тестах. В тестах ниже её не будет.
let reqUrl_4 = pm.request.url.query.toObject();

5. Проверить, что name в ответе равно name s request (name забрать из request.) ===
pm.test("Check name from request", function () {
    pm.expect(reqUrl_4.name).to. eql(yolochka_4.name)
});
Test Result: Check name from request

6. Проверить, что age в ответе равно age из request (age забрать из request.) === 
pm.test("Check age from request", function () {
    pm.expect(+reqUrl_4.age).to.eql(yolochka_4.age)
});
Test Result: PASS Check age from request

7. Вывести в консоль параметр salary из request. ===
console.log("Check salary from request = " + reqUrl_4.salary)
Console: 
Check salary from request = 1000

8. Вывести в консоль параметр salary из response. ===
console.log("Check salary from response = " + yolochka_4.salary)
Console:
Check salary from response = 1000,2000,3000

9. Вывести в консоль 0-й элемент параметра salary из response. ===
console.log("Check salary [0] from response = "+ yolochka_4.salary[0])
Console:
Check salary [0] from response = 1000

10. Вывести в консоль 1-й элемент параметра salary параметр salary из response. ===
console.log("Check salary [1] from response = " + yolochka_4.salary[1])
Console:
Check salary [1] from response = 2000

11. Вывести в консоль 2-й элемент параметра salary параметр salary из response. ===
console.log("Check salary [2] from response = " + yolochka_4.salary[2])
Console:
Check salary [2] from response = 3000

12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.) ===
pm.test("Check salary [0] from response = salary from reqest", function () {
    pm.expect(yolochka_4.salary[0]).to.eql(+reqUrl_4.salary)
});
Test Result: PASS Check salary [0] from response = salary from reqest

13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.) === 
pm.test("Check salary [1] from response = salary*2 from reqest", function () {
    pm.expect(+yolochka_4.salary[1]).to.eql(+reqUrl_4.salary*2)
});
Test Result: PASS Check salary [1] from response = salary*2 from reqest

14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.) ===
pm.test("Check salary [2] from response = salary*3 from reqest", function () {
    pm.expect(+yolochka_4.salary[2]).to.eql(+reqUrl_4.salary*3)
});
Test Result: PASS Check salary [2] from response = salary*3 from reqest

15. Создать в окружении переменную name ===
Environment --> VARIABLE: name --> Save
4-object_info_4 --> dropdown --> group_26
 
16. Создать в окружении переменную age ===
Environment --> VARIABLE: age --> Save

17. Создать в окружении переменную salary ===
Environment --> VARIABLE: salary --> Save

18. Передать в окружение переменную name ===
pm.environment.set("name", reqUrl_4.name);

19. Передать в окружение переменную age ===
pm.environment.set("age", reqUrl_4.age);

20. Передать в окружение переменную salary ===
pm.environment.set("salary", reqUrl_4.salary);

21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.
for (var i = 0; i < yolochka_4.salary.length; i++) {
   console.log("Cycle with salary for element №", i, yolochka_4.salary[i]);
}
Console:
Cycle with salary for element №
0
1000
Cycle with salary for element №
1
2000
Cycle with salary for element №
2
3000

Part_2
http://162.55.220.72:5005/user_info_2
1. Вставить параметр salary из окружения в request ===
Body --> VALUE: {{salary}}

2. Вставить параметр age из окружения в age ===
Body --> VALUE: {{age}}

3. Вставить параметр name из окружения в name ===
Body --> VALUE: {{name}}

4. Отправить запрос. ===
{
    "person": {
        "u_age": 33,
        "u_name": [
            "Igor",
            1000,
            33
        ],
        "u_salary_5_years": 4200.0
    },
    "qa_salary_after_1.5_year": 3300.0,
    "qa_salary_after_12_months": 2700.0,
    "qa_salary_after_3.5_years": 3800.0,
    "qa_salary_after_6_months": 2000,
    "start_qa_salary": 1000
}

5. Статус код 200 ===
// Tests --> SNIPPETS --> Status code: Code is 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
Test Result: PASS Status code is 200

6. Спарсить response body в json.  ===
// Переменная yolocka_5 будет применяться в последующих тестах. В тестах ниже её не будет.
var yolochka_5 = pm.response.json();

7. Спарсить request.  ===
var reqBody = request.data;

8. Проверить, что json response имеет параметр start_qa_salary ===
pm.test("Check for parameter start_qa_salary", function () {
    pm.expect(yolochka_5).to.property("start_qa_salary")
});
Test Result: PASS Check for parameters start_qa_salary

9. Проверить, что json response имеет параметр qa_salary_after_6_months ===
pm.test("Check for parameter qa_salary_after_6_months", function () {
    pm.expect(yolochka_5).to.have.property("qa_salary_after_6_months")
});
Test Result: PASS Check for parameter qa_salary_after_6_months

10. Проверить, что json response имеет параметр qa_salary_after_12_months ===
pm.test("Check for parameter qa_salary_after_12_months", function () {
    pm.expect(yolochka_5).to.have.any.keys("qa_salary_after_12_months")
});
Test Result: PASS Check for parameter qa_salary_after_12_months

11. Проверить, что json response имеет параметр qa_salary_after_1.5_year ===
pm.test("Check for parameter qa_salary_after_1.5_year", function () {
    pm.expect(yolochka_5).to.have.property("qa_salary_after_1.5_year")
});
Test Result: PASS Check for parameter qa_salary_after_1.5_year

12. Проверить, что json response имеет параметр qa_salary_after_3.5_years ===
pm.test("Check for parameter qa_salary_after_3.5_years", function () {
    pm.expect(yolochka_5).to.have.any.keys("qa_salary_after_3.5_years")
});
Test Result: PASS Check for parameter qa_salary_after_3.5_years

13. Проверить, что json response имеет параметр person ===
pm.test("Check for parameter person", function () {
    pm.expect(yolochka_5).to.have.property("person")
});
Test Result: PASS Check for parameter person

14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)  ===
pm.test("Check start_qa_salary = salary from reqest", function () {
    pm.expect(yolochka_5.start_qa_salary).to.eql(+reqBody.salary)
});
Test Result: PASS Check start_qa_salary = salary from reqest

15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.) ===
pm.test("Check qa_salary_after_6_months = salary*2", function () {
    pm.expect(yolochka_5.qa_salary_after_6_months).to.eql(reqBody.salary*2)
});
Test Result: PASS Check qa_salary_after_6_months = salary*2

16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.) ===
pm.test("Check qa_salary_after_12_months = salary*2.7", function () {
    pm.expect(yolochka_5.qa_salary_after_12_months).to.eql(reqBody.salary*2.7)
});
Test Result: PASS Check qa_salary_after_6_months = salary*2.7

17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.) ===
pm.test("Check qa_salary_after_1.5_year = salary*3.3", function () {
    pm.expect(yolochka_5["qa_salary_after_1.5_year"]).to.eql(reqBody.salary*3.3)
});
Test Result: PASS Check qa_salary_after_1.5_year = salary*3.3

18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.) ===
pm.test("Check qa_salary_after_3.5_years = salary*3.8", function () {
    pm.expect(yolochka_5["qa_salary_after_3.5_years"]).to.eql(reqBody.salary*3.8)
});
Test Result: PASS Check qa_salary_after_3.5_years = salary*3.8

19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.) ===
pm.test("Check person.u_name[1] = salary", function () {
    pm.expect(yolochka_5["person"]["u_name"][1]).to.eql(+reqBody.salary)
});
Test Result: PASS Check person.u_name[1] = salary

20. Проверить, что что параметр u_age равен age из request (age забрать из request.) ===
// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)
pm.test("Check u_age = age", function () {
    pm.expect(yolochka_5.person.u_age).to.eql(+reqBody.age)
});
Test Result: PASS Check u_age = age

21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.) ===
pm.test("Check u_salary_5_years = salary*4.2", function () {
    pm.expect(yolochka_5["person"]["u_salary_5_years"]).to.eql(reqBody.salary*4.2)

});
Test Result: PASS Check u_salary_5_years = salary*4.2

22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.
for (let key in yolochka_5.person)
    console.log(key, yolochka_5.person[key]);
Console:
u_age
33
 
u_name
(3) ["Igor", 1000, 33]
0: "Igor"
1: 1000
2: 33
 
u_salary_5_years
4200